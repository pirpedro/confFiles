#!/bin/bash

USAGE=`cat << EOF
  Usage: ${0##*/} {install|remove|enable|disable|new|list} {all | <specific script>}
EOF`

usage(){
  echo $USAGE
}

#check if exists environment variable to manually change resources location
MY_CONFIG_DIR=${MY_CONFIG_PATH:=/usr/local/my-config}
#path to subfolder with extra functions and files
MY_CONFIG_EXT="$MY_CONFIG_DIR/ext"
#path to plugins folder
MY_CONFIG_PLUGIN="$MY_CONFIG_EXT/plugins"

source $MY_CONFIG_EXT/functions.sh
CONFIGURATION_FILE="$MY_CONFIG_DIR/my-config.conf"

if [[ ! -e $CONFIGURATION_FILE ]]; then
  touch $CONFIGURATION_FILE
fi

__load_config_file $CONFIGURATION_FILE

#directory where the script will search for config files to load
PACKAGE_LOCATION="$MY_CONFIG_DIR/packages-enabled";
PACKAGES_AVAILABLE="$MY_CONFIG_DIR/packages-available"
PACKAGE_RC="$PACKAGE_LOCATION/rc"

#export useful variables
export MY_CONFIG_DIR
export MY_CONFIG_EXT
export MY_CONFIG_PLUGIN
export PACKAGE_LOCATION
export PACKAGE_RC

#extension of the config files
EXT=".sh"
DEBUG_MODE=0;
FILES=;

for arg do
  shift
  case "$arg" in
    -v|--verbose )
        __verbosity on
      ;;
    -d|--debug )
      set -x
      ;;
    --version ) cat $MY_CONFIG_DIR/.version; exit; ;;
    --exec-path) echo $MY_CONFIG_DIR; exit; ;;
    --ext-path ) echo $MY_CONFIG_EXT; exit; ;;
    --pkg-path ) echo $PACKAGE_LOCATION; exit; ;;
    --all-pkg-path ) echo $PACKAGES_AVAILABLE; exit; ;;
    --default-extension ) echo $EXT; exit; ;;
    *) set -- "$@" "$arg"; ;;
  esac
done

if [[ "$!" != -* ]]; then
  ACTION="$1"; shift;
else
  usage
  exit 1;
fi
#this function load files, give execution
#permission for each one and execute the right action on it.
__load(){
	if [ ! -d $PACKAGE_LOCATION ]; then
                __warning "Packages directory does not exist.";
                exit 64;
        fi
        if [ -z $TARGET ] || [ "$TARGET" == "all" ]; then
                FILES=($( ls $PACKAGE_LOCATION/*$EXT));
        else
                if [ ! -e $PACKAGE_LOCATION/*$TARGET$EXT ]; then
                        __warning "Configuration file for $TARGET not found";
                        exit 0;
                fi
                FILES=($( ls $PACKAGE_LOCATION/*$TARGET$EXT));
        fi

	for file in "${FILES[@]}"
	do
		if [ -f $file ]; then
      if [ `__required check $(__format_script_name $file)` ]; then
        __notification "The script $(__format_script_name $file) is already installed"
        continue
      fi

			if [ ! -x $file ]; then
				sudo chmod +x $file
			fi
      __notification "$ACTION $(__format_script_name $file): Action Started..."
			source $PROFILE
			$file $ACTION $MY_CONFIG_DIR $MY_CONFIG_EXT
      __required $ACTION $(__format_script_name $file)
      __notification "$ACTION $(__format_script_name $file): Action Finished."
		fi
	done
}

__init(){
  __verbosity on
  if [ `__required check $(__format_script_name initial)` ]; then
    __warning "You already initialize my-config in your system."
    __warning "Execute '${0##*/} -h' to learn about everything you can use."
    exit 1;
  else
    __notification "Hi! Welcome to my-config environment command."
    __notification "Initializing means the creation of useful files."
    __question_inline "Can we proceed? [${WHITE}Yy${GREEN}]: "
    read answer
    case "$answer" in
      [Nn]* )
        __notification "Ok! Maybe next time."
        __notification "See our manual and comeback as soon as possible."
        ;;
      *)
        __notification "So, let's start!"
        TARGET="initial"
        ACTION="install"
        __load;
        __notification "Now you can use and extend all the scripts for your own behavior."
        __notification "Good work!"
        ;;
    esac
  fi
}
#check if the script has super user permissions
#if [ ! "$(id -u)" = "0" ]; then
#        __warning "You need super user privileges to run some of the scripts."
#	exit 1
#fi

if [ ! -e $PROFILE ]; then
  mkdir -p $(dirname $PROFILE)
  touch $PROFILE
fi

if [[ ! `__required check $(__format_script_name initial)` && "$ACTION" != "init" ]]; then
  __verbosity on
  __warning "You didn't initialize my-config in your machine yet".
  __notification "Execute '${0##*/} init' or see our manual for other options."
  exit 1
fi

case "$ACTION" in
  init)
    __init;
  ;;
  install|remove)
  if [[ "$1" != -* ]]; then TARGET=$1; fi
    __load;
  ;;
  rc)
    __load;
  ;;
  list)
  	echo "Available configuration files:"
  	for file in $PACKAGE_LOCATION/*$EXT
  	do
  		echo $(__format_script_name $file)
  	done
  ;;
  link)
    __my_link $TARGET $1
  ;;
  sync)
    __my_sync $TARGET $1
  ;;
  test)

  ;;
  *)
    PLUGIN=$MY_CONFIG_PLUGIN/my-config-$ACTION
    if [[ -e $PLUGIN ]]; then
      if [[ ! -x $PLUGIN ]]; then
        sudo chmod +x $PLUGIN
      fi
      $PLUGIN $TARGET "$@"
    else
      usage
      #exit 64
    fi
  ;;
esac
