#!/bin/bash

#check if exists environment variable to manually change resources location
MY_CONFIG_DIR=${MY_CONFIG_PATH:=/usr/local/my-config}
#path to subfolder with extra functions and files
MY_CONFIG_EXT="$MY_CONFIG_DIR/ext"
#path to plugins folder
MY_CONFIG_PLUGIN="$MY_CONFIG_EXT/plugins"

source $MY_CONFIG_EXT/functions.sh
CONFIGURATION_FILE="$MY_CONFIG_DIR/my-config.conf"

if [[ ! -e $CONFIGURATION_FILE ]]; then
  touch $CONFIGURATION_FILE
fi

__load_config_file $CONFIGURATION_FILE

#directory where the script will search for config files to load
PACKAGE_LOCATION="$MY_CONFIG_DIR/packages-enabled";
PACKAGES_AVAILABLE="$MY_CONFIG_DIR/packages-available"
PACKAGE_RC="$PACKAGE_LOCATION/rc"

#export useful variables
export MY_CONFIG_DIR
export MY_CONFIG_EXT
export MY_CONFIG_PLUGIN
export PACKAGE_LOCATION
export PACKAGE_RC

#extension of the config files
EXT=".sh"
DEBUG_MODE=0;
FILES=;
#keeps the action information (install|remove)
ACTION="$1"; shift; #shift to make getopts works
TARGET=$1; shift; #shift to make getopts works

while getopts "p:dv" OPTION; do
    case "$OPTION" in
        d) DEBUG_MODE=1
            set -x
            ;;
        v)  __verbosity on
            ;;

        # Unknown option. No need for an error, getopts informs
        # the user itself.
        \?) exit 1;;
    esac
done

#this function load files, give execution
#permission for each one and execute the right action on it.
__load(){
	if [ ! -d $PACKAGE_LOCATION ]; then
                __warning "Packages directory does not exist.";
                exit 64;
        fi
        if [ -z $TARGET ] || [ "$TARGET" == "all" ]; then
                FILES=($( ls $PACKAGE_LOCATION/*$EXT));
        else
                if [ ! -e $PACKAGE_LOCATION/*$TARGET$EXT ]; then
                        __warning "Configuration file for $TARGET not found";
                        exit 0;
                fi
                FILES=($( ls $PACKAGE_LOCATION/*$TARGET$EXT));
        fi

	for file in "${FILES[@]}"
	do
		if [ -e $file ]; then
      if [ `__required check $(__format_script_name $file)` ]; then
        __notification "The script $(__format_script_name $file) is already installed"
        continue
      fi

			if [ ! -x $file ]; then
				sudo chmod +x $file
			fi
      __notification "$ACTION $(__format_script_name $file): Action Started..."
			source $PROFILE
			$file $ACTION $MY_CONFIG_DIR $MY_CONFIG_EXT
      __required $ACTION $(__format_script_name $file)
      __notification "$ACTION $(__format_script_name $file): Action Finished."
		fi
	done
}

#check if the script has super user permissions
#if [ ! "$(id -u)" = "0" ]; then
#        __warning "You need super user privileges to run some of the scripts."
#	exit 1
#fi

if [ ! -e $PROFILE ]; then
  mkdir -p $(dirname $PROFILE)
  touch $PROFILE
fi

case "$ACTION" in
init)
        $MY_CONFIG_DIR/bin/my-config install initial
;;
install)
        __load;
;;
remove)
        __load;
;;
rc)
        __load;
;;
list)
	echo "Available configuration files:"
	for file in $PACKAGE_LOCATION/*$EXT
	do
		echo $(__format_script_name $file)
	done
;;
enable)
    if [ -z $TARGET ]; then
        __warning "You need to pass the script target"
        exit 0
    fi
    if [ -z $(ls $PACKAGES_AVAILABLE/*$TARGET$EXT) ]; then
        __warning "Script doesn't exist."
        exit 0
    fi
    ln -sf $(ls $PACKAGES_AVAILABLE/*$TARGET$EXT) $PACKAGE_LOCATION/
    if [[ -d $PACKAGES_AVAILABLE/rc/$TARGET ]]; then
      mkdir -p $PACKAGE_LOCATION/rc/$TARGET
      ln -sf $PACKAGES_AVAILABLE/rc/$TARGET/* $PACKAGE_LOCATION/rc/$TARGET
    fi

;;
disable)
     if [ -z $TARGET ]; then
        __warning "You need to pass the script target"
        exit 0
    fi
    rm $( ls $PACKAGE_LOCATION/*$TARGET$EXT )
    rm -rf $PACKAGE_LOCATION/rc/$TARGET
;;
new)
      if [ -z $TARGET ]; then
        __warning "You need to pass the script name"
        exit 0
      fi
      if [[ -f $PACKAGES_AVAILABLE/$TARGET$EXT ]]; then
        __warning "$TARGET script already exist."
        exit 0
      fi
      cp $MY_CONFIG_EXT/template $PACKAGES_AVAILABLE/$TARGET$EXT

;;
link)
  __my_link $TARGET $1
;;
sync)
  __my_sync $TARGET $1
;;
version)
  cat $MY_CONFIG_DIR/.version
;;
test)

;;
*)
  PLUGIN=$MY_CONFIG_PLUGIN/my-config-$ACTION
  if [[ -e $PLUGIN ]]; then
    if [[ ! -x $PLUGIN ]]; then
      sudo chmod +x $PLUGIN
    fi
    $PLUGIN $TARGET "$@"
  else
    echo "Usage: ${0##*/} {install|remove|enable|disable|new|list} {all | <specific script>}"
    #exit 64
  fi
;;
esac
