#!/bin/bash

USAGE=`cat << EOF
{install|remove|enable|disable|new|list} {all | <specific script>}
EOF`

#check if exists environment variable to manually change resources location
MY_CONFIG_DIR=${MY_CONFIG_PATH:=/usr/local/my-config}
#path to subfolder with extra functions and files
MY_CONFIG_EXT="$MY_CONFIG_DIR/ext"
#path to plugins folder
MY_CONFIG_PLUGIN="$MY_CONFIG_EXT/plugins"

source $MY_CONFIG_EXT/functions.sh

#CONFIGURATION_FILE="$MY_CONFIG_DIR/my-config.conf"
#if [[ ! -e $CONFIGURATION_FILE ]]; then
#  touch $CONFIGURATION_FILE
#fi
#__load_config_file $CONFIGURATION_FILE

#directory where the script will search for config files to load
PACKAGE_LOCATION="$MY_CONFIG_DIR/packages-enabled";
PACKAGES_AVAILABLE="$MY_CONFIG_DIR/packages-available"
PACKAGE_RC="$PACKAGE_LOCATION/rc"

#export useful variables
export MY_CONFIG_DIR
export MY_CONFIG_EXT
export MY_CONFIG_PLUGIN
export PACKAGE_LOCATION
export PACKAGE_RC

#extension of the config files
EXT=".sh"

if empty "$1"; then
  usage
  die
fi

PLUGIN="$1"; shift;
if ! startswith "$1" "-"; then
  ACTION="$1"; shift;
fi

for arg do
  shift
  case "$arg" in
    -v|--verbose ) verbosity on; ;;
    -d|--debug ) set -x; ;;
    --version ) cat $MY_CONFIG_DIR/.version; exit; ;;
    --exec-path) echo $MY_CONFIG_DIR; exit; ;;
    --ext-path ) echo $MY_CONFIG_EXT; exit; ;;
    --pkg-path ) echo $PACKAGE_LOCATION; exit; ;;
    --all-pkg-path ) echo $PACKAGES_AVAILABLE; exit; ;;
    --default-extension ) echo $EXT; exit; ;;
    *) set -- "$@" "$arg"; ;;
  esac
done


#this function load files, give execution
#permission for each one and execute the right action on it.
__load(){
  local FILES
	if [ ! -d $PACKAGE_LOCATION ]; then
                warn "Packages directory does not exist.";
                exit 64;
        fi
        if [ -z $TARGET ] || [ "$TARGET" == "all" ]; then
                FILES=($( ls $PACKAGE_LOCATION/*$EXT));
        else
                if [ ! -e $PACKAGE_LOCATION/*$TARGET$EXT ]; then
                        warn "Configuration file for $TARGET not found";
                        exit 0;
                fi
                FILES=($( ls $PACKAGE_LOCATION/*$TARGET$EXT));
        fi

  local script_name;
	for file in "${FILES[@]}"
	do
		if [ -f $file ]; then
      script_name=$(__format_script_name $file)
      if __required check "$script_name"; then
        note "The script "$script_name" is already installed"
        continue
      fi

			if [ ! -x $file ]; then
				sudo chmod +x $file
			fi
      note "$ACTION "$script_name": Action Started..."
			source $PROFILE
			$file $ACTION $MY_CONFIG_DIR $MY_CONFIG_EXT
      __required $ACTION "$script_name"
      note "$ACTION "$script_name": Action Finished."
		fi
	done
}

__init(){
  verbosity on
  if __required check $(__format_script_name initial); then
    warn "You already initialize my-config in your system."
    warn "Execute '${0##*/} -h' to learn about everything you can use."
    exit 1;
  else
    note "Hi! Welcome to my-config environment command."
    note "Initializing means the creation of useful files."
    if ask_boolean "Can we proceed?"; then
      note "So, let's start!"
      TARGET="initial"
      ACTION="install"
      __load;
      note "Now you can use and extend all the scripts for your own behavior."
      note "Good work!"
    else
      note "Ok! Maybe next time."
      note "See our manual and comeback as soon as possible."
    fi
  fi
}
#check if the script has super user permissions
#if [ ! "$(id -u)" = "0" ]; then
#        warn "You need super user privileges to run some of the scripts."
#	exit 1
#fi

if [ ! -e $PROFILE ]; then
  mkdir -p $(dirname $PROFILE)
  touch $PROFILE
fi

if ! __required check initial && equals "$PLUGIN" "config" && equals "$ACTION" "init"; then
  verbosity on
  warn "You didn't initialize my-config in your machine yet".
  warn "Execute '${0##*/} init' or see our manual for other options."
  die
fi

case "$PLUGIN" in
  config)
    case "$ACTION" in
      init)
        __init;
      ;;
      install|remove)
        [[ "$1" != -* ]] || die "No script name passed."
        TARGET=$1
        __load;
      ;;
      rc)
        __load;
      ;;
      list)
        echo "Available configuration files:"
        for file in $PACKAGE_LOCATION/*$EXT
        do
          echo $(__format_script_name $file)
        done
      ;;
      link)
        my_link $TARGET $1
      ;;
      sync)
        my_sync $TARGET $1
      ;;
      *)
        PLUGIN=$MY_CONFIG_PLUGIN/my-config-$ACTION
        if [[ -e $PLUGIN ]]; then
          if [[ ! -x $PLUGIN ]]; then
            sudo chmod +x $PLUGIN
          fi
          $PLUGIN $TARGET "$@"
        else
          usage
        fi
      ;;
    esac
  ;;
  *)
  PLUGIN=$MY_CONFIG_PLUGIN/my-$PLUGIN
  if [[ -e $PLUGIN ]]; then
    if [[ ! -x $PLUGIN ]]; then
      sudo chmod +x $PLUGIN
    fi
    $PLUGIN $ACTION "$@"
  else
    usage
  fi
  ;;
esac
